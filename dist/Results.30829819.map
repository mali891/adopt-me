{"version":3,"sources":["Pet.js","Results.js"],"names":["Pet","props","name","animal","breed","media","location","id","photos","photo","filter","hero","value","React","Component","petfinder","key","secret","Results","state","pets","search","searchParams","pet","find","output","then","data","petsArray","Array","isArray","setState","map","breeds","join","contact","city","ResultsWithContext","context"],"mappings":"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","file":"Results.30829819.map","sourceRoot":"../src","sourcesContent":["import React from 'react';\nimport { Link } from '@reach/router';\n\nclass Pet extends React.Component {\n    render() {\n        const { name, animal, breed, media, location, id } = this.props;\n        let photos = [];\n\n        if(media && media.photos && media.photos.photo) {\n            photos = media.photos.photo.filter(photo => photo[\"@size\"] === 'pn');\n        }\n\n        //If there is no associated image for the pet, use a placeholder\n        const hero = photos[0] ? photos[0].value : 'http://placecorgi.com/300/300';\n\n        return (\n            //Display details of the pet\n            //Link through to a new page which will display the details of the animal\n            <Link to={`/details/${id}`} className=\"pet\">\n                <div className=\"image-container\">\n                    <img src={ hero } alt={ `${name} image` }/>\n                </div>\n                <div className=\"info\">\n                    <h1>{ name }</h1>\n                    <h2>{ animal } - { breed } - { location }</h2>\n                </div>\n            </Link>\n        )\n    }\n}\n\nexport default Pet;","import React from 'react';\nimport pf from 'petfinder-client';\nimport { Consumer } from './SearchContext';\nimport Pet from './Pet';\nimport SearchBox from './SearchBox';\n\n//Pass the API creds to API method\nconst petfinder = pf({\n    key: process.env.API_KEY,\n    secret: process.env.API_SECRET\n})\n\nclass Results extends React.Component {\n    state = {\n        pets: []\n    }\n\n    //Initiate search on render\n    componentDidMount() { this.search() }\n\n    search = () => {\n        const searchParams = this.props.searchParams;\n\n        //Call the API using state from Context\n        petfinder.pet.find({ \n            output: \"full\", \n            location: searchParams.location, \n            animal: searchParams.animal,\n            breed: searchParams.breed, \n        })\n            .then(data => {\n                const petsArray = data.petfinder.pets;\n                let pets;\n\n                //Make sure we have an array to work with\n                if(petsArray && petsArray.pet) {\n                    Array.isArray(petsArray.pet) ? pets = petsArray.pet : pets = [petsArray.pet]\n                } else {\n                    pets = []\n                }\n\n                this.setState({ pets })\n            })\n    }\n    \n    render() {\n        return (\n            <div className=\"search\">\n                <SearchBox search={ this.search } />\n\n                {/* render list of pets */}\n                { this.state.pets.map(pet => {\n                    let breed;\n\n                    Array.isArray(pet.breeds.breed) ? breed = pet.breeds.breed.join(', ') : breed = pet.breeds.breed;\n\n                    return (\n                        <Pet \n                            key={ pet.id }  \n                            id={ pet.id }\n                            name={ pet.name }  \n                            animal={ pet.animal }  \n                            breed={ breed }  \n                            media={ pet.media }\n                            location={ `${pet.contact.city}, ${pet.contact.state}` }\n                        />\n                    ) \n                })}\n            </div>\n        )\n    }\n}\n\n//This is needed since we are using context outside of render method\nexport default function ResultsWithContext(props) {\n    return (\n        <Consumer>\n            { context => <Results { ...props } searchParams={ context }/> }\n        </Consumer>\n    )\n}\n"]}